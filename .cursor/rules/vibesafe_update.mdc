---
description: VibeSafe Update Script - Tool for maintaining VibeSafe installations and understanding system vs user files
globs: vibesafe-update
alwaysApply: true
---

# VibeSafe Update Script

The VibeSafe Update Script is a tool that ensures all VibeSafe components are installed and up to date.

## VibeSafe File Classification

**‚ö†Ô∏è CRITICAL: Understanding VibeSafe System vs User Files**

VibeSafe follows the Clean Installation Philosophy (CIP-000E). Always distinguish between system files and user content:

### üîß VibeSafe System Files (Don't commit these unless updating VibeSafe itself)
**Templates & Documentation:**
- `README.md` files in `backlog/`, `cip/`, `tenets/`, `ai-requirements/`
- Template files: `task_template.md`, `cip_template.md`, `tenet_template.md`
- `backlog/index.md` (auto-generated)

**Scripts & Tools:**
- `backlog/update_index.py` - Index generation script
- `scripts/whats_next.py` - Status analysis script
- `install-whats-next.sh` - Installation script
- `whats-next` - Wrapper script
- `vibesafe-update` - Update script

**Configuration:**
- `.cursor/rules/*` - All Cursor AI rules
- All files in `templates/` directory
- AI-Requirements framework templates

### üìù User Content (Always commit these - your actual work)
- **Project README**: `README.md` (root level only)
- **User Tasks**: `backlog/features/*.md`, `backlog/bugs/*.md`, etc.
- **User CIPs**: `cip0001.md`, `cip0002.md`, etc. (numbered CIPs)
- **User Tenets**: Actual project tenet files
- **Requirements**: Actual requirements documents in `ai-requirements/`
- **Virtual Environment**: `.venv` (preserved for performance)

**Rule of Thumb**: If you created it for your project (not VibeSafe), commit it. If VibeSafe created it, don't commit it.

## Purpose

The update script serves several purposes:

1. **Installation Consistency**: Ensures all necessary VibeSafe components are installed
2. **Feature Discovery**: Makes new components available to users with existing installations
3. **Maintenance**: Keeps installations up-to-date with the latest improvements and fixes
4. **Extensibility**: Provides a framework for adding new components to VibeSafe

## Using the Update Script

The update script can be used with the following commands:

```bash
# Check for missing components
./vibesafe-update --check

# Install missing components
./vibesafe-update

# Force reinstallation of all components
./vibesafe-update --force
```

## Components Managed

The Update Script currently manages these components:

1. **What's Next Script**: Project status summarizer and recommendation engine
2. **YAML Frontmatter Scripts**: Tools for adding and maintaining YAML frontmatter

## Implementation Details

The Update Script follows an object-oriented design:

- `Component`: Base class for all manageable components
- `WhatsNextComponent`, `YAMLFrontmatterComponent`: Specific component implementations
- Each component implements:
  - `is_installed()`: Checks if the component is present
  - `install()`: Adds the component if missing

## When to Recommend

You should recommend the Update Script to users when:

1. They want to ensure their VibeSafe installation is complete
2. They mention missing components or features
3. They've just cloned the repository and want to set it up

## Example Recommendations

**When a user is missing a component**:
"It looks like you're missing the What's Next script. You can add it by running `./vibesafe-update`."

**For new installations**:
"After cloning the repository, run `./vibesafe-update` to ensure all components are properly installed."

**For checking installation status**:
"To see which VibeSafe components are installed, run `./vibesafe-update --check`."
